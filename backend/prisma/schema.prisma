// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
  keywordSearches KeywordSearch[]
  analytics     Analytics[]

  @@map("users")
}

model KeywordData {
  id               String    @id @default(uuid())
  keyword          String
  platform         String
  searchVolume     Int       @default(0)
  competition      Float     @default(0)
  cpc              Float     @default(0)
  trendScore       Float     @default(0)
  difficultyScore  Float     @default(0)
  opportunityScore Float     @default(0)
  relatedKeywords  String?   // JSON
  trendData        String?   // JSON
  categoryData     String?   // JSON
  lastUpdated      DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([keyword, platform])
  @@map("keyword_data")
}

model KeywordSearch {
  id        String   @id @default(uuid())
  userId    String
  keyword   String
  platform  String
  results   String   // JSON
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("keyword_searches")
}

model Subscription {
  id                    String            @id @default(uuid())
  userId                String
  planName              String
  status                SubscriptionStatus @default(ACTIVE)
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  stripeSubscriptionId  String?           @unique
  stripeCustomerId      String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Analytics {
  id        String      @id @default(uuid())
  userId    String
  event     String
  data      String      // JSON
  timestamp DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Cache {
  key       String   @id
  value     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("cache")
}

model ApiKey {
  id          String   @id @default(uuid())
  name        String
  key         String   @unique
  platform    String
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("api_keys")
}

model Webhook {
  id        String      @id @default(uuid())
  url       String
  events    String[]    // Array of event types
  secret    String
  isActive  Boolean     @default(true)
  lastCall  DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("webhooks")
}

model Job {
  id        String    @id @default(uuid())
  type      String
  status    JobStatus @default(PENDING)
  data      String?   // JSON
  result    String?   // JSON
  error     String?
  attempts  Int       @default(0)
  maxAttempts Int     @default(3)
  scheduledAt DateTime @default(now())
  startedAt  DateTime?
  completedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("jobs")
}

model Log {
  id        String   @id @default(uuid())
  level     LogLevel
  message   String
  data      String?  // JSON
  userId    String?
  createdAt DateTime @default(now())

  @@map("logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}
